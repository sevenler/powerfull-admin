{"version":3,"sources":["/src/renderers/Image.tsx"],"names":[],"mappings":"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","file":"Image.js","sourcesContent":["import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {filter} from '../utils/tpl';\nimport {ClassNamesFn, themeable} from '../theme';\nimport {autobind} from '../utils/helper';\nimport {Icon} from '../components/icons';\n\nexport interface ImageThumbProps {\n  src: string;\n  originalSrc?: string; // 原图\n  enlargeAble?: boolean;\n  onEnlarge?: (info: ImageThumbProps) => void;\n  showDimensions?: boolean;\n  title?: string;\n  alt?: string;\n  index?: number;\n  className?: string;\n  imageClassName?: string;\n  caption?: string;\n  thumbMode?: 'w-full' | 'h-full' | 'contain' | 'cover';\n  thumbRatio?: '1:1' | '4:3' | '16:9';\n  classnames: ClassNamesFn;\n  classPrefix: string;\n  onLoad?: React.EventHandler<any>;\n}\n\nexport class ImageThumb extends React.Component<ImageThumbProps> {\n  @autobind\n  handleEnlarge() {\n    const {onEnlarge, ...rest} = this.props;\n    onEnlarge && onEnlarge(rest);\n  }\n\n  render() {\n    const {\n      classnames: cx,\n      className,\n      imageClassName,\n      thumbMode,\n      thumbRatio,\n      src,\n      alt,\n      title,\n      caption,\n      onLoad,\n      enlargeAble\n    } = this.props;\n\n    return (\n      <div className={cx('Image', className)}>\n        <div\n          className={cx(\n            'Image-thumb',\n            thumbMode ? `Image-thumb--${thumbMode}` : '',\n            thumbRatio ? `Image-thumb--${thumbRatio.replace(/:/g, '-')}` : ''\n          )}\n        >\n          <img\n            onLoad={onLoad}\n            className={cx(imageClassName)}\n            src={src}\n            alt={alt}\n          />\n\n          {enlargeAble ? (\n            <div key=\"overlay\" className={cx('Image-overlay')}>\n              <a\n                data-tooltip=\"查看大图\"\n                data-position=\"bottom\"\n                target=\"_blank\"\n                onClick={this.handleEnlarge}\n              >\n                <Icon icon=\"view\" className=\"icon\" />\n              </a>\n            </div>\n          ) : null}\n        </div>\n        {title || caption ? (\n          <div key=\"caption\" className={cx('Image-info')}>\n            {title ? <div className={cx('Image-title')}>{title}</div> : null}\n            {caption ? (\n              <div className={cx('Image-caption')}>{caption}</div>\n            ) : null}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\nconst ThemedImageThumb = themeable(ImageThumb);\nexport default ThemedImageThumb;\n\nexport interface ImageFieldProps extends RendererProps {\n  className?: string;\n  imageClassName?: string;\n  placeholder: string;\n  description?: string;\n  enlargeTitle?: string;\n  enlargeCaption?: string;\n  thumbMode: 'w-full' | 'h-full' | 'contain' | 'cover';\n  thumbRatio: '1:1' | '4:3' | '16:9';\n  originalSrc?: string; // 原图\n  enlargeAble?: boolean;\n  onImageEnlarge?: (\n    info: {\n      src: string;\n      originalSrc: string;\n      title?: string;\n      caption?: string;\n      thumbMode?: 'w-full' | 'h-full' | 'contain' | 'cover';\n      thumbRatio?: '1:1' | '4:3' | '16:9';\n    },\n    target: any\n  ) => void;\n  showDimensions?: boolean;\n}\n\nexport class ImageField extends React.Component<ImageFieldProps, object> {\n  static defaultProps: Pick<\n    ImageFieldProps,\n    'defaultImage' | 'thumbMode' | 'thumbRatio' | 'placeholder'\n  > = {\n    defaultImage:\n      'https://fex.bdstatic.com/n/static/amis/renderers/crud/field/placeholder_cfad9b1.png',\n    thumbMode: 'contain',\n    thumbRatio: '1:1',\n    placeholder: '-'\n  };\n\n  @autobind\n  handleEnlarge({\n    src,\n    originalSrc,\n    title,\n    caption,\n    thumbMode,\n    thumbRatio\n  }: ImageThumbProps) {\n    const {onImageEnlarge, enlargeTitle, enlargeCaption} = this.props;\n\n    onImageEnlarge &&\n      onImageEnlarge(\n        {\n          src,\n          originalSrc: originalSrc || src,\n          title: enlargeTitle || title,\n          caption: enlargeCaption || caption,\n          thumbMode,\n          thumbRatio\n        },\n        this.props\n      );\n  }\n\n  render() {\n    const {\n      className,\n      defaultImage,\n      imageCaption,\n      title,\n      data,\n      imageClassName,\n      classnames: cx,\n      src,\n      thumbMode,\n      thumbRatio,\n      placeholder,\n      originalSrc,\n      enlargeAble,\n      showDimensions\n    } = this.props;\n\n    const finnalSrc = src ? filter(src, data, '| raw') : '';\n    let value = finnalSrc || this.props.value || defaultImage;\n\n    return (\n      <div className={cx('ImageField', className)}>\n        {value ? (\n          <ThemedImageThumb\n            imageClassName={imageClassName}\n            src={value}\n            title={filter(title, data)}\n            caption={filter(imageCaption, data)}\n            thumbMode={thumbMode}\n            thumbRatio={thumbRatio}\n            originalSrc={filter(originalSrc, data, '| raw')}\n            enlargeAble={enlargeAble && value !== defaultImage}\n            onEnlarge={this.handleEnlarge}\n            showDimensions={showDimensions}\n          />\n        ) : (\n          <span className=\"text-muted\">{placeholder}</span>\n        )}\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)image$/,\n  name: 'image'\n})\nexport class ImageFieldRenderer extends ImageField {}\n"]}