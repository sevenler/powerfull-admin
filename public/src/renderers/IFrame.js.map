{"version":3,"sources":["/src/renderers/IFrame.tsx"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAC1B,sCAAmD;AAEnD,0CAAuD;AACvD,oCAAwD;AACxD,oCAAsC;AAOtC;IAAoC,kCAAoC;IAAxE;QAAA,qEA4DC;QA3DC,eAAS,GAAuC,eAAK,CAAC,SAAS,EAAE,CAAC;;IA2DpE,CAAC;IAlDC,+BAA+B;IAE/B,uBAAM,GAAN,UAAO,OAAa,EAAE,KAAW;QAC/B,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC5B;QAEK,mBAAwB,EAAvB,YAAG,EAAE,cAAkB,CAAC;QAE/B,IAAI,GAAG,EAAE;YACN,IAAI,CAAC,SAAS,CAAC,OAA6B,CAAC,GAAG,GAAG,cAAQ,CAC1D,GAAG,EACH,IAAI,CACL,CAAC,GAAG,CAAC;SACP;IACH,CAAC;IAED,6BAA6B;IAE7B,wBAAO,GAAP,UAAQ,MAAc;QACd,mBAAwB,EAAvB,YAAG,EAAE,cAAkB,CAAC;QAE/B,IAAI,GAAG,EAAE;YACN,IAAI,CAAC,SAAS,CAAC,OAA6B,CAAC,GAAG,GAAG,cAAQ,CAC1D,GAAG,EACH,qBAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAC3B,CAAC,GAAG,CAAC;SACP;IACH,CAAC;IAED,uBAAM,GAAN;QACM,mBAAsE,EAArE,wBAAS,EAAE,YAAG,EAAE,gBAAK,EAAE,kBAAM,EAAE,4BAAW,EAAE,cAAI,EAAE,gBAAmB,CAAC;QAE3E,KAAK,wBACA,KAAK,CACT,CAAC;QAEF,KAAK,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;QAC1C,MAAM,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;QAE7C,OAAO,CACL,0CACE,SAAS,EAAE,SAAS,EACpB,WAAW,EAAE,WAAW,EACxB,KAAK,EAAE,KAAK,EACZ,GAAG,EAAE,IAAI,CAAC,SAAS,EACnB,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,cAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,GAC9C,CACH,CAAC;IACJ,CAAC;IAzDM,gBAAS,GAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IAChD,mBAAY,GAAyB;QAC1C,SAAS,EAAE,EAAE;QACb,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,CAAC;KACf,CAAC;IAIF;QADC,iBAAQ;;;;wCAcR;IAID;QADC,iBAAQ;;;;yCAUR;IAsBH,aAAC;CAAA,CA5DmC,eAAK,CAAC,SAAS,GA4DlD;kBA5DoB,MAAM;AAkE3B;IAAoC,0CAAM;IAA1C;;IAYA,CAAC;IATC,2CAAkB,GAAlB;QACE,IAAM,MAAM,GAAG,IAAI,CAAC,OAAyB,CAAC;QAC9C,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,6CAAoB,GAApB;QACE,IAAM,MAAM,GAAG,IAAI,CAAC,OAAyB,CAAC;QAC9C,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAVM,0BAAW,GAAG,sBAAa,CAAC;IADxB,cAAc;QAJ1B,kBAAQ,CAAC;YACR,IAAI,EAAE,eAAe;YACrB,IAAI,EAAE,QAAQ;SACf,CAAC;OACW,cAAc,CAY1B;IAAD,qBAAC;CAAA,CAZmC,MAAM,GAYzC;AAZY,wCAAc","file":"IFrame.js","sourcesContent":["import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {filter} from '../utils/tpl';\nimport {autobind, createObject} from '../utils/helper';\nimport {ScopedContext, IScopedContext} from '../Scoped';\nimport {buildApi} from '../utils/api';\n\nexport interface IFrameProps extends RendererProps {\n  className?: string;\n  src?: string;\n}\n\nexport default class IFrame extends React.Component<IFrameProps, object> {\n  IFrameRef: React.RefObject<HTMLIFrameElement> = React.createRef();\n  static propsList: Array<string> = ['src', 'className'];\n  static defaultProps: Partial<IFrameProps> = {\n    className: '',\n    width: '100%',\n    height: '100%',\n    frameBorder: 0\n  };\n\n  // 当别的组件通知 iframe reload 的时候执行。\n  @autobind\n  reload(subpath?: any, query?: any) {\n    if (query) {\n      return this.receive(query);\n    }\n\n    const {src, data} = this.props;\n\n    if (src) {\n      (this.IFrameRef.current as HTMLIFrameElement).src = buildApi(\n        src,\n        data\n      ).url;\n    }\n  }\n\n  // 当别的组件把数据发给 iframe 里面的时候执行。\n  @autobind\n  receive(values: object) {\n    const {src, data} = this.props;\n\n    if (src) {\n      (this.IFrameRef.current as HTMLIFrameElement).src = buildApi(\n        src,\n        createObject(data, values)\n      ).url;\n    }\n  }\n\n  render() {\n    let {className, src, width, height, frameBorder, data, style} = this.props;\n\n    style = {\n      ...style\n    };\n\n    width !== void 0 && (style.width = width);\n    height !== void 0 && (style.height = height);\n\n    return (\n      <iframe\n        className={className}\n        frameBorder={frameBorder}\n        style={style}\n        ref={this.IFrameRef}\n        src={src ? buildApi(src, data).url : undefined}\n      />\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)iframe$/,\n  name: 'iframe'\n})\nexport class IFrameRenderer extends IFrame {\n  static contextType = ScopedContext;\n\n  componentWillMount() {\n    const scoped = this.context as IScopedContext;\n    scoped.registerComponent(this);\n  }\n\n  componentWillUnmount() {\n    const scoped = this.context as IScopedContext;\n    scoped.unRegisterComponent(this);\n  }\n}\n"]}